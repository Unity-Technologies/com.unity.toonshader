{% metadata_file .yamato/UnityToonShader.metafile %}

#
#
#

---

publish:
  name: Publish {{ yamato_name }} to Internal Registry
  agent:
    type: Unity::VM
    image: package-ci/win10:v4
    flavor: b1.large
  commands:
    - npm install upm-ci-utils@stable -g --registry https://artifactory.prd.cds.internal.unity3d.com/artifactory/api/npm/upm-npm
    - upm-ci package publish --package-path com.unity.toonshader
  triggers:
    tags:
      only:
        - /^(r|R)(c|C)-\d+\.\d+\.\d+(-preview(\.\d+)?)?$/
  artifacts:
    {{ yamato_name }}_publish_artifacts:
      paths:
        - "upm-ci~/packages/*.tgz"
  dependencies:
    - .yamato/{{ yamato_name }}-pack.yml#pack
    {% for editor in test_editors %}
    {% for platform in platforms %}
    {% assign platform_type = platform.platform_type %}    
    - .yamato/{{ yamato_name }}-test-package.yml#test_{{ platform_type.name }}_{{ editor.version }}
    {% endfor %}
    {% endfor %}    
    # OSX Metal projects
    {% for test_project in osx_test_projects %}
    {% for unity_editor in test_project.unity_editors %}
    {% assign project_name = test_project.project_prefix | append: '-' | concat: unity_editor.version %}
    - .yamato/{{ yamato_name }}-test-projects.yml#{{ project_name }}_OSX_Metal_playmode_mono_Linear    
    {% endfor %}
    {% endfor %}
    # Win projects
    {% for test_project in win_test_projects %}
    {% for unity_editor in test_project.unity_editors %}
    {% assign project_name = test_project.project_prefix | append: '-' | concat: unity_editor.version %}
    - .yamato/{{ yamato_name }}-test-projects.yml#{{ project_name }}{{ test_project.key_postfix}}_Win_playmode    
    {% endfor %}
    {% endfor %}
    

    
publish_dry_run:
  name: Publish Dry Run {{ yamato_name }} to Internal Registry
  agent:
    type: Unity::VM
    image: package-ci/win10:v4
    flavor: b1.large
  commands:
    - npm install upm-ci-utils@stable -g --registry https://artifactory.prd.cds.internal.unity3d.com/artifactory/api/npm/upm-npm
    - upm-ci package publish --dry-run --package-path com.unity.toonshader
  triggers:
    tags:
      only:
        - /^(r|R)(c|C)-\d+\.\d+\.\d+(-preview(\.\d+)?)?$/
  artifacts:
    {{ yamato_name }}_publish_dry_run_artifacts:
      paths:
        - "upm-ci~/packages/*.tgz"
  dependencies:
    - .yamato/{{ yamato_name }}-pack.yml#pack
    {% for editor in test_editors %}
    {% for platform in platforms %}
    {% assign platform_type = platform.platform_type %}    
    - .yamato/{{ yamato_name }}-test-package.yml#test_{{ platform_type.name }}_{{ editor.version }}
    {% endfor %}
    {% endfor %}    
    # OSX Metal projects
    {% for test_project in osx_test_projects %}
    {% for unity_editor in test_project.unity_editors %}
    {% assign project_name = test_project.project_prefix | append: '-' | concat: unity_editor.version %}
    - .yamato/{{ yamato_name }}-test-projects.yml#{{ project_name }}_OSX_Metal_playmode_mono_Linear    
    {% endfor %}
    {% endfor %}
    # Win projects
    {% for test_project in win_test_projects %}
    {% for unity_editor in test_project.unity_editors %}
    {% assign project_name = test_project.project_prefix | append: '-' | concat: unity_editor.version %}
    - .yamato/{{ yamato_name }}-test-projects.yml#{{ project_name }}{{ test_project.key_postfix}}_Win_playmode    
    {% endfor %}
    {% endfor %}


prerelease:
  name: Create a prerelease {{ yamato_name }}  
  agent:
    type: Unity::VM
    image: package-ci/ubuntu-22.04:v4
    flavor: b1.medium
  commands:
    - |
       echo off
       packageFilePath=`find upm-ci~/packages -name "*.tgz" -print`
       if [[ $packageFilePath =~ ^upm-ci~\/packages\/.*-([0-9]+)\.([0-9]+)\.([0-9]+)(-[0-9a-zA-Z.]*)?\.tgz$ ]]; then
         fullMatch="${BASH_REMATCH[0]}"
         majorVer="${BASH_REMATCH[1]}"
         minorVer="${BASH_REMATCH[2]}"
         patchVer="${BASH_REMATCH[3]}"
         tagVer="${BASH_REMATCH[4]}"
         packageVer="${majorVer}.${minorVer}.${patchVer}${tagVer}"
         
         echo "Installing gh"         
         curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
         echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
         sudo apt update
         sudo apt install gh

         hostName=`dirname $GIT_REPOSITORY_URL | cut -f1 -d":" | cut -f2 -d"@"`       
         ownerName=`dirname $GIT_REPOSITORY_URL | cut -f2 -d":"`       
         repoName=`basename $GIT_REPOSITORY_URL | sed "s/.git//"`
         ownerRepo="$ownerName/$repoName"
         echo "Git repository URL: $GIT_REPOSITORY_URL"
         echo "Host: $hostName"
         echo "Owner: $ownerName"
         echo "Repo: $repoName"

         unset GITHUB_TOKEN
         echo "Creating release $packageVer"
         echo "$GH_YAMATO_DEPLOYMENT" > token.txt
                  
         gh auth login --hostname $hostName --with-token < token.txt 
         gh release create $packageVer $packageFilePath --title $packageVer --notes "$packageVer Release"  --prerelease --target $GIT_BRANCH --repo $ownerRepo
       fi
       echo "End"
    
  dependencies:
    - .yamato/UnityToonShader-publish.yml#publish


